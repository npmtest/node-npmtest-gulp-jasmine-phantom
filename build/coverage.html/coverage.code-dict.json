{"/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/test.js":"/* istanbul instrument in package npmtest_gulp_jasmine_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/lib.npmtest_gulp_jasmine_phantom.js":"/* istanbul instrument in package npmtest_gulp_jasmine_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_jasmine_phantom = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_jasmine_phantom = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-jasmine-phantom && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_jasmine_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_jasmine_phantom\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_jasmine_phantom.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_jasmine_phantom.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_jasmine_phantom.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_jasmine_phantom.__dirname + '/lib.npmtest_gulp_jasmine_phantom.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/node_modules/gulp-jasmine-phantom/index.js":"'use strict';\nvar _ = require('lodash'),\n    exec = require('child_process').execSync,\n    execFile = require('child_process').execFile,\n    fs = require('fs'),\n    glob = require('glob'),\n    gutil = require('gulp-util'),\n    handlebar = require('handlebars'),\n    Jasmine = require('jasmine'),\n    path = require('path'),\n    through = require('through2');\n\n/*\n * Global variables\n *\n * gulpOptions: object of options passed in through Gulp\n * jasmineCSS: string path to the jasmine.css file for the specRunner.html\n * jasmineJS: array of string paths to JS needed for the specRunner.html\n * specHtml: string path to the tmp specRunner.html to be written out to\n * specRunner: string path to the specRunner JS file needed in the specRunner.html\n **/\nvar phantomExecutable = process.platform === 'win32' ? 'phantomjs.cmd' : 'phantomjs',\n    gulpOptions = {},\n    jasmineCss, jasmineJs,\n    vendorJs = [],\n    specHtml = path.join(__dirname, '/lib/specRunner.html'),\n    specRunner = path.join(__dirname, '/lib/specRunner.js');\n\n\nfunction configJasmine(version) {\n  version = version || '2.0';\n  jasmineCss = path.join(__dirname, '/vendor/jasmine-' + version + '/jasmine.css');\n  jasmineJs = [\n    path.join(__dirname, '/vendor/jasmine-' + version + '/jasmine.js'),\n    path.join(__dirname, '/vendor/jasmine-' + version + '/jasmine-html.js'),\n    path.join(__dirname, '/vendor/jasmine-' + version + '/console.js'),\n    path.join(__dirname, '/vendor/jasmine-' + version + '/boot.js')\n  ];\n}\n\n/**\n  * Removes the specRunner.html file\n  **/\nfunction cleanup(path) {\n  fs.unlink(path);\n}\n\nfunction hasGlobalPhantom() {\n  if(process.platform === 'win32') {\n    try {\n      exec('where phantomjs');\n    } catch (e) {\n      return false;\n    }\n  } else {\n    try {\n      exec('which phantomjs');\n    } catch (e) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * execPhantom\n *\n * @param {string} phantom Path to phantom\n * @param {array} childArguments Array of options to pass to Phantom\n * @param {function} onComplete Callback function\n */\nfunction execPhantom(phantom, childArguments, onComplete) {\n  execFile(phantom, childArguments, function(error, stdout, stderr) {\n    var success = null;\n\n    if(error !== null) {\n      success = new gutil.PluginError('gulp-jasmine-phantomjs', error.code + ': Tests contained failures. Check logs for details.');\n    }\n\n    if (stderr !== '') {\n      gutil.log('gulp-jasmine-phantom: Failed to open test runner ' + gutil.colors.blue(childArguments[1]));\n      gutil.log(gutil.colors.red('error: '), stderr);\n      success = new gutil.PluginError('gulp-jasmine-phantomjs', 'Failed to open test runner ' + gutil.colors.blue(childArguments[1]));\n    }\n\n    if(gulpOptions.specHtml === undefined && (gulpOptions.keepRunner === undefined || gulpOptions.keepRunner === false)) {\n      cleanup(childArguments[1]);\n    }\n\n    console.log(stdout);\n    onComplete(success);\n  });\n}\n\n/**\n  * Executes Phantom with the specified arguments\n  * \n  * childArguments: Array of options to pass Phantom\n  * [jasmine-runner.js, specRunner.html]\n  **/\nfunction runPhantom(childArguments, onComplete) {\n  if(hasGlobalPhantom()) {\n    execPhantom(phantomExecutable, childArguments, onComplete);\n  } else {\n    gutil.log(gutil.colors.yellow('gulp-jasmine-phantom: Global Phantom undefined, trying to execute from node_modules/phantomjs'));\n    execPhantom(process.cwd() + '/node_modules/.bin/' + phantomExecutable, childArguments, onComplete);\n  }\n}\n\n/*\n * Reads in the handlebar template and creates a data HTML object in memory to create\n *\n * options: list of options that can be passed to the function\n *  files: paths to files being tested\n *  onComplete: callback to call when everything is done\n **/\nfunction compileRunner(options) {\n  var filePaths = options.files || [],\n      onComplete = options.onComplete || {};\n  fs.readFile(path.join(__dirname, '/lib/specRunner.handlebars'), 'utf8', function(error, data) {\n    if (error) {\n      throw error;\n    }\n\n    var vendorScripts = gulpOptions.vendor;\n\n    if (vendorScripts) {\n      if (typeof vendorScripts === 'string') {\n        vendorScripts = [vendorScripts];\n      }\n\n      vendorScripts.forEach(function(fileGlob) {\n        if (fileGlob.match(/^http/)) {\n          vendorJs.push(fileGlob);\n        }\n        else {\n          glob.sync(fileGlob).forEach(function(newFile) {\n            vendorJs.push(path.join(process.cwd(), newFile));\n          });\n        }\n      });\n    }\n    // Create the compile version of the specRunner from Handlebars\n    var specData = handlebar.compile(data),\n        specCompiled = specData({\n          files: filePaths,\n          jasmineCss: jasmineCss,\n          jasmineJs: jasmineJs,\n          vendorJs: vendorJs,\n          specRunner: specRunner\n        });\n\n    if(gulpOptions.keepRunner !== undefined && typeof gulpOptions.keepRunner === 'string') {\n      specHtml = path.join(path.resolve(gulpOptions.keepRunner), '/specRunner.html');\n    }\n\n    fs.writeFile(specHtml, specCompiled , function(error) {\n      if (error) {\n        throw error;\n      }\n\n      if(gulpOptions.integration) {\n        var childArgs = [\n          path.join(__dirname, '/lib/jasmine-runner.js'),\n          specHtml,\n          JSON.stringify(gulpOptions)\n        ];\n        runPhantom(childArgs, onComplete);\n      } else {\n        onComplete(null);\n      }\n    });\n  });\n}\n\nmodule.exports = function (options) {\n  var filePaths = [];\n\n  gulpOptions = options || {};\n\n  configJasmine(gulpOptions.jasmineVersion);\n\n  if(!!gulpOptions.integration) {\n    return through.obj(\n      function (file, encoding, callback) {\n        if (file.isNull()) {\n          callback(null, file);\n          return;\n        }\n        if (file.isStream()) {\n          callback(new gutil.PluginError('gulp-jasmine-phantom', 'Streaming not supported'));\n          return;\n        }\n        filePaths.push(file.path);\n        callback(null, file);\n      }, function (callback) {\n        gutil.log('Running Jasmine with PhantomJS');\n        try {\n          if(gulpOptions.specHtml) {\n            runPhantom(\n              [\n                path.join(__dirname, '/lib/jasmine-runner.js'),\n                path.resolve(gulpOptions.specHtml),\n                JSON.stringify(gulpOptions)\n              ], function(success) {\n              callback(success);\n            });\n          } else {\n            compileRunner({\n              files: filePaths,\n              onComplete: function(success) {\n                callback(success);\n              }\n            });\n          }\n        } catch(error) {\n          callback(new gutil.PluginError('gulp-jasmine-phantom', error));\n        }\n      }\n    );\n  }\n\n  return through.obj(\n    function(file, encoding, callback) {\n      if (file.isNull()) {\n        callback(null, file);\n        return;\n      }\n\n      if (file.isStream()) {\n        callback(new gutil.PluginError('gulp-jasmine-phantom', 'Streaming not supported'));\n        return;\n      }\n\n      /**\n      * Get the cache object of the specs.js file,\n      * get its children and delete the childrens cache\n      */\n      var modId = require.resolve(path.resolve(file.path));\n      var files = require.cache[modId];\n      if (typeof files !== 'undefined') {\n        for (var i in files.children) {\n          delete require.cache[files.children[i].id];\n        }\n      }\n      delete require.cache[modId];\n\n      filePaths.push(path.relative(process.cwd(), file.path));\n      callback(null, file);\n    },\n    function(callback) {\n      gutil.log('Running Jasmine in Node');\n      try {\n        var jasmine = new Jasmine(),\n            terminalReporter = require('./lib/terminal-reporter.js').TerminalReporter;\n\n        jasmine.addReporter(new terminalReporter(_.defaults(gulpOptions, {showColors: true})));\n\n        jasmine.loadConfig({\n          random: _.get(gulpOptions, 'random', false),\n          spec_files: filePaths\n        });\n\n        if (_.has(gulpOptions, 'seed')) {\n          jasmine.seed(gulpOptions.seed);\n        }\n\n        jasmine.onComplete(function(passed) {\n          callback(null);\n        });\n\n        jasmine.execute();\n\n      } catch(error) {\n        callback(new gutil.PluginError('gulp-jasmine-phantom', error));\n      }\n\n    }\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/node_modules/gulp-jasmine-phantom/lib/jasmine-runner.js":"var system = require('system'),\n    abortOnFail = false,\n    hasTestFailures = false,\n    page = require('webpage').create(),\n    errorRegEx = /^\\d+ spec.*failure/,\n    finishRegEx = /^Finished in \\d*\\.\\d* second/;\n\nif (system.args.length < 2 ) {\n    console.log('Usage: run-jasmine.js URL');\n    phantom.exit(1);\n}\n\nif(system.args.length === 3 &&\n    system.args[2] !== 'undefined') {\n\n  abortOnFail = JSON.parse(system.args[2]).abortOnFail;\n}\n\n// Route \"console.log()\" calls from within the Page context to the main Phantom context (i.e. current \"this\")\npage.onConsoleMessage = function(msg) {\n    console.log(msg);\n\n    if(msg.match(errorRegEx) !== null) {\n      hasTestFailures = true;\n    }\n\n    if(msg.match(finishRegEx) !== null) {\n      phantom.exit(hasTestFailures && abortOnFail ? 1 : 0);\n    }\n};\n\npage.open(system.args[1], function(status) {\n    if (status !== \"success\") {\n      console.log(\"Couldn't load the page\");\n      phantom.exit(1);\n    }\n    system.stdout.writeLine(\"\");\n});\n\n","/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/node_modules/gulp-jasmine-phantom/lib/specRunner.js":"  var consoleReporter = new jasmineRequire.ConsoleReporter()({\n    showColors: true,\n    timer: new jasmine.Timer,\n    print: function() {\n      console.log.apply(console, arguments)\n    }\n  });\n\n  jasmine.getEnv().addReporter(consoleReporter);\n","/home/travis/build/npmtest/node-npmtest-gulp-jasmine-phantom/node_modules/gulp-jasmine-phantom/lib/terminal-reporter.js":"var noopTimer = {\n  start: function(){},\n  elapsed: function(){ return 0; }\n};\n\nexports.TerminalReporter = function(options) {\n  var print = console.log,\n    showColors = options.showColors || false,\n    done = options.done || function() {},\n    timer = options.timer || noopTimer,\n    stackTrace = options.includeStackTrace || false,\n    specCount,\n    failureCount,\n    failedSpecs = [],\n    pendingCount,\n    suiteIndentation = 0,\n    ansi = {\n      green: '\\x1B[32m',\n      red: '\\x1B[31m',\n      yellow: '\\x1B[33m',\n      none: '\\x1B[0m'\n    };\n\n  this.jasmineStarted = function() {\n    specCount = 0;\n    failureCount = 0;\n    pendingCount = 0;\n    print('Started');\n    printNewline();\n    timer.start();\n  };\n\n  this.jasmineDone = function(result) {\n    printNewline();\n    for (var i = 0; i < failedSpecs.length; i++) {\n      if(!i) {\n        print('Failures:');\n      }\n      specFailureDetails(failedSpecs[i]);\n    }\n\n    printNewline();\n\n    if(specCount > 0) {\n\n      var successCount = specCount - failureCount,\n          specCounts = specCount + ' ' + plural('spec', specCount);\n\n      if(successCount) {\n        specCounts += ', ' + colored('green',  successCount + ' ' + plural('success', successCount));\n      }\n\n      if(failureCount) {\n        specCounts += ', ' + colored('red', failureCount + ' ' + plural('failure', failureCount));\n      }\n\n      if (pendingCount) {\n        specCounts += ', ' + colored('yellow', pendingCount + ' pending ');\n      }\n\n      print(specCounts);\n    } else {\n      print('No specs found');\n    }\n\n    var seconds = timer.elapsed() / 1000;\n    print('Finished in ' + seconds + ' ' + plural('second', seconds));\n\n    if (result && result.order && result.order.random) {\n      print('Randomized with seed ' + result.order.seed);\n      printNewline();\n    }\n\n    done(failureCount === 0);\n  };\n\n  this.suiteStarted = function(suite) {\n    print(indent(suite.fullName, suiteIndentation));\n    suiteIndentation += 2;\n  };\n\n  this.suiteDone = function(suite) {\n    suiteIndentation -= 2;\n  };\n\n  this.specDone = function(result) {\n    specCount++;\n\n    if (result.status == 'pending') {\n      pendingCount++;\n      print(indent(colored('yellow', '* ' + result.description), suiteIndentation));\n      return;\n    }\n\n    if (result.status == 'passed') {\n      print(indent(colored('green', '\\u2714 ' + result.description), suiteIndentation));\n      return;\n    }\n\n    if (result.status == 'failed') {\n      failureCount++;\n      failedSpecs.push(result);\n      print(indent(colored('red', '\\u2716 ' + result.description), suiteIndentation));\n    }\n  };\n\n  function printNewline() {\n    print('\\n');\n  }\n\n  function colored(color, str) {\n    return showColors ? (ansi[color] + str + ansi.none) : str;\n  }\n\n  function plural(str, count) {\n    if(str[str.length-1] === 's') {\n      return count == 1 ? str : str + 'es';\n    }\n    return count == 1 ? str : str + 's';\n  }\n\n  function repeat(thing, times) {\n    var arr = [];\n    for (var i = 0; i < times; i++) {\n      arr.push(thing);\n    }\n    return arr;\n  }\n\n  function indent(str, spaces) {\n    var lines = (str || '').split('\\n');\n    var newArr = [];\n    for (var i = 0; i < lines.length; i++) {\n      newArr.push(repeat(' ', spaces).join('') + lines[i]);\n    }\n    return newArr.join('\\n');\n  }\n\n  function specFailureDetails(result) {\n    print(indent(result.fullName, 2));\n\n    for (var i = 0; i < result.failedExpectations.length; i++) {\n      var failedExpectation = result.failedExpectations[i];\n      print(indent(colored('red', failedExpectation.message), 4));\n      if(stackTrace) {\n        print(indent(failedExpectation.stack, 2));\n      }\n    }\n\n  }\n};\n"}